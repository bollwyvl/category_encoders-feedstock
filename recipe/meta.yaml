{% set version = "2.6.2" %}

package:
  name: category_encoders
  version: {{ version }}

source:
  - url: https://pypi.io/packages/source/c/category_encoders/category_encoders-{{ version }}.tar.gz
    sha256: f01abaa8e6f630756d67b81cbea673012b7759a78fdaada3a2c63f020333a5d6
    folder: dist
  - url: https://github.com/scikit-learn-contrib/category_encoders/archive/{{ version }}.tar.gz
    sha256: ee4c5bd81675b0ed63b5232bc61e6646515c3484ec4ff2f68dded9b6f324b168
    folder: src

build:
  noarch: python
  number: 0
  script:
    - cd dist && {{ PYTHON }} -m pip install -vvv .

requirements:
  host:
    - pip
    - python >=3.5
  run:
    - importlib-resources
    - numpy >=1.14.0
    - pandas >=1.0.5
    - patsy >=0.5.1
    - python >=3.5
    - scikit-learn >=0.20.0
    - scipy >=1.0.0
    - statsmodels >=0.9.0

test:
  source_files:
    - src/tests
  requires:
    - cython
    - pip
    - pytest
    - pytest-cov
  imports:
    - category_encoders
  commands:
    - pip check
    - python -W ignore -m pytest src -vv --cov=category_encoders --cov-branch -k="not (pandas_index or truncated_index)" --cov-report=term-missing:skip-covered --no-cov-on-fail --cov-fail-under=89

about:
  home: https://github.com/scikit-learn-contrib/category_encoders
  license: BSD-3-Clause
  license_family: BSD
  license_file: dist/LICENSE.md
  summary: A collection of sklearn transformers to encode categorical variables as numeric
  doc_url: https://contrib.scikit-learn.org/category_encoders/
  description: |-
    A set of scikit-learn-style transformers for encoding categorical variables
    into numeric with different techniques. While ordinal, one-hot, and hashing
    encoders have similar equivalents in the existing scikit-learn version, the
    transformers in this library all share a few useful properties:

    - First-class support for pandas dataframes as an input (and optionally as
      output)

    - Can explicitly configure which columns in the data are encoded by name or
      index, or infer non-numeric columns regardless of input type

    - Can drop any columns with very low variance based on training set
      optionally

    - Portability: train a transformer on data, pickle it, reuse it later and
      get the same thing out.

    - Full compatibility with sklearn pipelines, input an array-like dataset
      like any other transformer

extra:
  recipe-maintainers:
    - bollwyvl
    - nirajd
    - wdm0006
